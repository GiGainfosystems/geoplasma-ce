<?php

namespace App\Http\Middleware;

use Closure;
use App\Ip;
use Carbon\Carbon;
use Illuminate\Support\Facades\Request as Requester;

class ExploitProtection
{
    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure  $next
     * @return mixed
     */
    public function handle($request, Closure $next)
    {
        $error = false;
        // Get all IPs that are older than 4 seconds and that are not marked or blacklisted
        $ips = Ip::where('created_at', '<', Carbon::now()->subSeconds(4)->toDateTimeString())->where('marked','=',0)->where('blacklist','=',0)->get();
        // Delete all IPs that are unsuspicious
        foreach($ips as $ip) {
            $ip->delete();
        }

        // Check if there is an entry for the requester IP (=> IP would be suspicious)
        $ip = Ip::where('ip','=',Requester::ip())->first();
        if($ip) {
            if($ip->marked) {
                if(strtotime($ip->created_at) > strtotime(Carbon::now()->subSeconds(7)->toDateTimeString())) {
                    $ip->blacklist = 1;
                    $ip->save();
                    $error = true;
                } else {
                    $ip->delete();
                }
            }
            elseif($ip->blacklist) {
                $error = true;
            }
            else {
                $ip->marked = 1;
                $ip->save();
            }
        } else {
            $ip = new Ip;
            $ip->ip = Requester::ip();
            $ip->save();
        }
        if($error) {
            return response()->json([
                'form' => 'signup',
                'status' => false,
                'message' => 'forms.general.error.message.general'
            ]);
        } else {
            return $next($request);
        }

    }
}
